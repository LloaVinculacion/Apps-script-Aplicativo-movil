{"files":[{"id":"1242a189-6667-4164-934e-fdd9d5df635c","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"America/Guayaquil\",\n  \"dependencies\": {},\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\",\n  \"webapp\": {\n    \"executeAs\": \"USER_DEPLOYING\",\n    \"access\": \"ANYONE_ANONYMOUS\"\n  }\n}"},{"id":"f70dffb3-9cc8-4755-b3cd-fe5311e22609","name":"Code","type":"server_js","source":"var SheetId \u003d \"1jANyD0255nc4Mrj1KzXb39pXqZjEtS5GNVtUk-NlEoI\";\nvar SheetId2 \u003d \"1UE2z8k5yuMYnDEKHtkNM2nj_BRpH-xs4v1nzjX0Dom0\";\n\n\nfunction doGet(e) {\n  return graficarDatos(e);\n}\n\nfunction doPost(e) {\n  return graficarDatos(e);\n}\n\nfunction graficarDatos(e) {\n  \n  filtrarDatos(e);\n\n  // Obtener los parámetros de la solicitud HTTP\n  var parametros \u003d e.parameter; \n  var vaca \u003d parametros.vaca; \n  var opci \u003d parametros.opc;\n\n  // Obtener una referencia a la hoja para el grafico\n  var sheetName \u003d \"Filtro\"; // Nombre de la hoja donde deseas pegar los datos\n  var spreadsheet \u003d SpreadsheetApp.openById(SheetId);\n  var sheetGraficar \u003d spreadsheet.getSheetByName(sheetName);\n\n// Obtener una referencia a la hoja para el grafico\n  var sheetName \u003d \"Graficar\"; // Nombre de la hoja donde deseas pegar los datos\n  var spreadsheet \u003d SpreadsheetApp.openById(SheetId);\n  var sheetGrafico \u003d spreadsheet.getSheetByName(sheetName);\n  \n\n  // Crear la hoja si no existe\n  if (sheetGraficar \u003d\u003d\u003d null) {\n    sheetGraficar \u003d spreadsheet.insertSheet(sheetName);\n  }\n\n  //Rango datos\n  var lastFila \u003d sheetGraficar.getLastRow();\n  var lastColumna \u003d sheetGraficar.getLastColumn();\n  var rangeDatos \u003d sheetGraficar.getRange(1,1,lastFila,lastColumna);\n  var rangeDatosA \u003d sheetGraficar.getRange(1,1,lastFila,1);\n  var rangeDatosB \u003d sheetGraficar.getRange(1,2,lastFila,1);\n  var rangeDatosC \u003d sheetGraficar.getRange(1,3,lastFila,1);\n  var rangeDatosD \u003d sheetGraficar.getRange(1,4,lastFila,1);\n  var vectRange\u003d[rangeDatos,rangeDatosA,rangeDatosB,rangeDatosC,rangeDatosD];\n  //console.log(vectRange[0].getValues());\n\n  for (i\u003d0;i\u003c4;i++){\n    if (sheetGraficar.getCharts()[i] \u003d\u003d null){\n      // Crea el gráfico\n      \n        if(i\u003d\u003d0){\n          var grafico0 \u003d sheetGraficar.newChart()\n          .setChartType(Charts.ChartType.AREA)\n          .addRange(rangeDatos)\n          //.addRange(vectRange[2])\n          //.addRange(vectRange[3])\n          //.addRange(vectRange[4])\n          .setPosition(7, 4, 0, 0) // Posiciona el gráfico en la hoja\n          .setOption(\u0027vAxis\u0027, {gridlines: { count: 20 } })\n          .setOption(\u0027title\u0027, \u0027Litros por dia de la vaca \u0027+vaca) // Título del gráfico\n          .setOption(\u0027isStacked\u0027, false)\n          .setOption(\u0027hAxis.title\u0027, \u0027Fechas\u0027) // Etiqueta del eje X\n          .setOption(\u0027vAxis.title\u0027, \u0027Litros de leche\u0027) // Etiqueta del eje Y\n          .setOption(\u0027useRowAsHeaders\u0027, true)\n          .setOption(\"width\",1000)\n          .setOption(\"height\",800)\n          .build();\n          if(opci\u003d\u003d\"dia\"){\n            grafico0 \u003d sheetGraficar.getCharts()[i];\n            grafico0\u003d grafico0.modify()\n            .setChartType(Charts.ChartType.COLUMN)\n            .build();\n          }\n          // Añade el gráfico a la hoja\n          sheetGraficar.insertChart(grafico0);\n        }else{\n          var colores;\n          if(i\u003d\u003d1){\n            colores\u003d\u0027#0000FF\u0027;\n          }else if(i\u003d\u003d2){\n            colores\u003d\u0027#FF0000\u0027;\n          }else if(i\u003d\u003d3){\n            colores\u003d\u0027#FFA500\u0027;\n          }\n          var grafico \u003d sheetGraficar.newChart()\n          .setChartType(Charts.ChartType.AREA)\n          .addRange(vectRange[1])\n          .addRange(vectRange[i+1])\n          .setPosition(7, 4, 0, 0) // Posiciona el gráfico en la hoja\n          .setOption(\u0027vAxis\u0027, {gridlines: { count: 20 } })\n          .setOption(\u0027title\u0027, \u0027Litros por dia de la vaca \u0027+vaca) // Título del gráfico\n          .setOption(\u0027isStacked\u0027, false)\n          .setOption(\u0027hAxis.title\u0027, \u0027Fechas\u0027) // Etiqueta del eje X\n          .setOption(\u0027vAxis.title\u0027, \u0027Litros de leche\u0027) // Etiqueta del eje Y\n          .setOption(\"width\",1000)\n          .setOption(\"height\",800)\n          .setOption(\u0027series\u0027, {\n            0: { color: colores }, // Color para la primera serie\n            })\n          .build();\n          if(opci\u003d\u003d\"dia\"){\n            grafico \u003d sheetGraficar.getCharts()[i];\n            grafico\u003d grafico.modify()\n            .setChartType(Charts.ChartType.COLUMN)\n            .build();\n          }\n          // Añade el gráfico a la hoja\n          sheetGraficar.insertChart(grafico);\n        }\n      \n      \n    }else{\n      \n        if(i\u003d\u003d0){\n          var chart0 \u003d sheetGraficar.getCharts()[i];\n          chart0 \u003d chart0.modify()\n          .setChartType(Charts.ChartType.AREA)\n          .clearRanges()\n          .addRange(rangeDatos)\n          //.addRange(vectRange[2])\n          //.addRange(vectRange[3])\n          //.addRange(vectRange[4])\n          .setPosition(7, 4, 0, 0) // Posiciona el gráfico en la hoja\n          .setOption(\u0027vAxis\u0027, { gridlines: { count: 20 } })\n          .setOption(\u0027title\u0027, \u0027Litros por dia de la vaca \u0027+vaca) // Título del gráfico\n          .setOption(\u0027isStacked\u0027, false)\n          .setOption(\u0027hAxis.title\u0027, \u0027Fechas\u0027) // Etiqueta del eje X\n          .setOption(\u0027vAxis.title\u0027, \u0027Litros de leche\u0027) // Etiqueta del eje Y\n          .setOption(\u0027useRowAsHeaders\u0027, true)\n          .setOption(\"width\",1000)\n          .setOption(\"height\",800)\n          .build();\n          if(opci\u003d\u003d\"dia\"){\n            chart0 \u003d sheetGraficar.getCharts()[i];\n            chart0\u003d chart0.modify()\n            .setChartType(Charts.ChartType.COLUMN)\n            .build();\n          }\n          sheetGraficar.updateChart(chart0);\n        }else{\n          var colores;\n          if(i\u003d\u003d1){\n            colores\u003d\u0027#0000FF\u0027;\n          }else if(i\u003d\u003d2){\n            colores\u003d\u0027#FF0000\u0027;\n          }else if(i\u003d\u003d3){\n            colores\u003d\u0027#FFA500\u0027;\n          }\n          var chart \u003d sheetGraficar.getCharts()[i];\n          chart \u003d chart.modify()\n          .setChartType(Charts.ChartType.AREA)\n          .clearRanges()\n          .addRange(vectRange[1])\n          .addRange(vectRange[i+1])\n          .setPosition(7, 4, 0, 0) // Posiciona el gráfico en la hoja\n          .setOption(\u0027vAxis\u0027, { gridlines: { count: 20 } })\n          .setOption(\"width\",1000)\n          .setOption(\"height\",800)\n          .setOption(\u0027title\u0027, \u0027Litros por dia de la vaca \u0027+vaca) // Título del gráfico\n          .setOption(\u0027isStacked\u0027, false)\n          .setOption(\u0027hAxis.title\u0027, \u0027Fechas\u0027) // Etiqueta del eje X\n          .setOption(\u0027vAxis.title\u0027, \u0027Litros de leche\u0027) // Etiqueta del eje Y\n          .setOption(\u0027useRowAsHeaders\u0027, true)\n          .setOption(\u0027series\u0027, {\n            0: { color: colores }, // Color para la primera serie\n            })\n          .build();\n          if(opci\u003d\u003d\"dia\"){\n            chart \u003d sheetGraficar.getCharts()[i];\n            chart\u003d chart.modify()\n            .setChartType(Charts.ChartType.COLUMN)\n            .build();\n          }\n          sheetGraficar.updateChart(chart);\n        }\n        \n      \n      \n    }\n  }\n  return ContentService.createTextOutput(\"Grafico Generado\");\n}\n\nfunction filtrarDatos(e) {\n  // Obtener una referencia a la hoja para el grafico\n  var sheetName \u003d \"GrafTodo\"; // Nombre de la hoja donde deseas pegar los datos\n  var spreadsheet2 \u003d SpreadsheetApp.openById(SheetId2);\n  var sheetGrafico2 \u003d spreadsheet2.getSheetByName(sheetName);\n\n  // Obtener una referencia a la hoja de Google Sheets Destino\n  var sheetName \u003d \"Filtro\"; // Nombre de la hoja donde deseas pegar los datos\n  var spreadsheet \u003d SpreadsheetApp.openById(SheetId);\n  var sheetDestino \u003d spreadsheet.getSheetByName(sheetName);\n\n  // Obtener una referencia a la hoja de Google Sheets Origen\n  var sheetName \u003d \"Produccion\"; // Nombre de la hoja donde deseas buscar los datos\n  var spreadsheet \u003d SpreadsheetApp.openById(SheetId);\n  var sheetOrigen \u003d spreadsheet.getSheetByName(sheetName);\n  // Obtener una referencia a la hoja de Google Sheets Origen\n  var sheetName \u003d \"Graficar\"; // Nombre de la hoja donde deseas buscar los datos\n  var spreadsheet \u003d SpreadsheetApp.openById(SheetId);\n  var sheetGrafico \u003d spreadsheet.getSheetByName(sheetName);\n\n  // Crear la hoja de destino si no existe\n  if (sheetDestino \u003d\u003d\u003d null) {\n    sheetDestino \u003d spreadsheet.insertSheet(\"Filtro\");\n  } else {\n    // Limpiar la hoja de destino\n    sheetDestino.clearContents();\n  }\n\n  // Obtener los parámetros de la solicitud HTTP\n  var parametros \u003d e.parameter;\n  var fechI \u003d String(parametros.fechaIn).split(\"-\");\n  var fechaFirst \u003d  fechI[1]+\"-\"+fechI[0]+\"-\"+fechI[2];\n  var fechF \u003d String(parametros.fechaFin).split(\"-\");\n  var fechaEnd \u003d fechF[1]+\"-\"+fechF[0]+\"-\"+fechF[2]; \n  var vaca \u003d parametros.vaca;\n  var opcion \u003d parametros.opc;\n  \n\n  // Validar que se ha proporcionado una fecha\n  if (!fechaFirst) {\n    return ContentService.createTextOutput(\"Por favor, proporciona una fecha Inicial en el formato \u0027dd-MM-yyyy\u0027.\");\n  }else if (!fechaEnd){\n    return ContentService.createTextOutput(\"Por favor, proporciona una fecha Final en el formato \u0027dd-MM-yyyy\u0027.\");\n  }\n  \n  // Obtener todos los datos de la hoja\n  //Seleccionar el rango a filrar\n  var lastFila \u003d sheetOrigen.getLastRow();\n  var lastColumna \u003d sheetOrigen.getLastColumn();\n  //var datosOrigen \u003d sheetOrigen.getRange(1,1,lastFila,lastColumna).getValues();\n  var datosOrigen \u003d sheetOrigen.getDataRange().getDisplayValues();\n  console.log(datosOrigen.length)\n  // filtramos las filas que coinciden con el rango\n  \n  //var datosFiltrados;\n  if (opcion \u003d\u003d \"dia\"){\n    if (vaca \u003d\u003d \"todo\"){\n      var datosFiltrados \u003d datosOrigen.filter(function(item){\n        if (new Date(item[0]) \u003e\u003d new Date(fechaFirst) \u0026\u0026  new Date(item[0]) \u003c\u003d new Date(fechaFirst)){\n          return true;\n        }\n      })\n    }else{\n      var datosFiltrados \u003d datosOrigen.filter(function(item){\n        if (new Date(item[0]) \u003e\u003d new Date(fechaFirst) \u0026\u0026  new Date(item[0]) \u003c\u003d new Date(fechaFirst)){\n          return vaca \u003d\u003d item[4];\n        }\n      })\n    }\n  }else{\n    if (vaca \u003d\u003d \"todo\"){\n      var datosFiltrados \u003d datosOrigen.filter(function(item){\n        if (new Date(item[0]) \u003e\u003d new Date(fechaFirst) \u0026\u0026  new Date(item[0]) \u003c\u003d new Date(fechaEnd)){\n          \n          return true;\n        }\n      })\n      console.log(\u0027ojo \u0027+datosFiltrados.length)\n    }else{\n      var datosFiltrados \u003d datosOrigen.filter(function(item){\n        if (new Date(item[0]) \u003e\u003d new Date(fechaFirst) \u0026\u0026  new Date(item[0]) \u003c\u003d new Date(fechaEnd)){\n          return vaca \u003d\u003d item[4];\n        }\n      })\n      console.log(\u0027iki \u0027+datosFiltrados.length)\n    }\n  }\n  \n  //Generar tablas para el grafico\n  var vectFecha \u003d oneColum(datosFiltrados,0);\n  var vectVolumen \u003d oneColum2(datosFiltrados,5);\n  var vectHorario \u003d oneColum2(datosFiltrados,2);\n  console.log(vectVolumen.length);\n  console.log(vectFecha.length);\n  console.log(vectHorario.length);\n  var tagFecha \u003d noRepetido(vectFecha);\n  console.log(tagFecha.length);\n  var volTotal \u003d [];\n  var volManiana \u003d [];\n  var volTarde \u003d [];\n  \n  for (i\u003d0;i\u003c\u003dtagFecha.length-1;i++){\n    var ban1 \u003d 0;\n    var ban2 \u003d 0;\n    for (j\u003d0;j\u003c\u003dvectFecha.length-1;j++){\n      if (tagFecha[i]\u003d\u003dvectFecha[j]){\n        if (\"MAÑANA\" \u003d\u003d vectHorario[j]){\n          ban1 \u003d ban1 + parseFloat(vectVolumen[j]);\n        }else{\n          ban2 \u003d ban2 + parseFloat(vectVolumen[j]);\n        }\n      }\n    }\n    volManiana[i] \u003d ban1;\n    volTarde[i] \u003d ban2;\n    volTotal[i] \u003d ban1+ban2;\n  }\n  var matrixVol \u003d transponerMatriz([tagFecha,volManiana,volTarde,volTotal]);\n  //console.log(matrixVol)\n  if (matrixVol.length\u003d\u003d0){\n      Logger.log(\"No existe coincideencias\");\n    }else{\n      //Pegar en Hoja Filtro\n      var rangoPegarE \u003d sheetDestino.getRange(1,1,1,4);\n      rangoPegarE.setValues([[\u0027Fecha\u0027,\u0027MAÑANA\u0027,\u0027TARDE\u0027,\u0027TOTAL\u0027]]);\n      var rangoPegarE2 \u003d sheetGrafico2.getRange(1,1,1,4);\n      rangoPegarE2.setValues([[\u0027Fecha\u0027,\u0027MAÑANA\u0027,\u0027TARDE\u0027,\u0027TOTAL\u0027]]);\n      var rangoPegarG \u003d sheetDestino.getRange(2,1,matrixVol.length, matrixVol[0].length);\n      rangoPegarG.setValues(matrixVol);\n      var rangoPegarG2 \u003d sheetGrafico2.getRange(2,1,matrixVol.length, matrixVol[0].length);\n      rangoPegarG2.setValues(matrixVol);\n  }  \n\n  \n  // Alinear celdas a la derecha\n  var numRows \u003d sheetDestino.getLastRow();\n  var numCols \u003d sheetDestino.getLastColumn();\n  if (numRows \u003e\u003d 2) {\n    var range \u003d sheetDestino.getRange(2, 1, numRows , numCols); // Excluir la fila de encabezado\n    range.setHorizontalAlignment(\"rigth\");\n  }\n\n  // Convertir las filas coincidentes a un formato de texto para responder a la solicitud HTTP\n  if (datosFiltrados.length \u003e 0) {\n    var resultado \u003d datosFiltrados.map(function(fila) {\n      return fila.join(\"\\t\");\n    }).join(\"\\n\");\n    \n    return ContentService.createTextOutput(\"Filas que coinciden con la fecha \" + fechaFirst );\n  } else {\n    return ContentService.createTextOutput(\"No se encontraron filas con la fecha \" + fechaEnd + \".\");\n  }\n}\n\nfunction noRepetido(arreglo) {\n  // Convertimos el arreglo a un Set, lo que elimina los duplicados automáticamente\n  var arregloSinDuplicados \u003d [...new Set(arreglo)];\n  \n  return arregloSinDuplicados;\n}\n\nfunction oneColum(arreglo,item) {\n  return arreglo.map(function(fila) {\n    var f \u003d String(fila[item]).split(\"-\")\n    return f[0]+\" - \"+f[1]+\" - \"+f[2]; // Accede al primer elemento de cada fila\n  });\n}\nfunction oneColum2(arreglo,item) {\n  return arreglo.map(function(fila) {\n    return fila[item]; // Accede al primer elemento de cada fila\n  });\n}\nfunction transponerMatriz(matriz) {\n  return matriz[0].map((_, colIndex) \u003d\u003e matriz.map(row \u003d\u003e row[colIndex]));\n}\nfunction rangeX(fila,i) {\n  if (i\u003d\u003d4){\n    return fila\n  }else{\n    return []\n  }\n}\n"}]}